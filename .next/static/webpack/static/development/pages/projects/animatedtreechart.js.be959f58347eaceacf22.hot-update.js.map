{"version":3,"file":"static/webpack/static/development/pages/projects/animatedtreechart.js.be959f58347eaceacf22.hot-update.js","sources":["webpack:///./pages/projects/animatedtreechart.js"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport { select, hierarchy, tree, linkHorizontal } from 'd3';\nimport useResizeObserver from '../../components/useResizeObserver';\n\nconst TreeChart = ({ data }) => {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    if (!dimensions) return;\n\n    const root = hierarchy(data);\n\n    const treeLayout = tree().size([dimensions.height, dimensions.width]);\n    treeLayout(root);\n    console.log(root.descendants());\n\n    const linkGenerator = linkHorizontal()\n      //   .source(link => link.source)\n      //   .target(link => link.target)\n      .x(node => node.y)\n      .y(node => node.x);\n\n    // rendering nodes\n    svg\n      .selectAll('.node')\n      .data(root.descendants())\n      .join('circle')\n      .attr('class', 'node')\n      .attr('r', 4)\n      .attr('fill', 'black')\n      .attr('cx', node => node.y)\n      .attr('cy', node => node.x)\n      .attr('opacity', 0)\n      .transition()\n      .delay(node => node.depth * 500)\n      .attr('opacity', 1);\n\n    // rendering links\n    svg\n      .selectAll('.link')\n      .data(root.links())\n      .join('path')\n      .attr('class', 'link')\n      .attr('fill', 'none')\n      .attr('stroke', 'black')\n      .attr('d', linkGenerator)\n      .attr('stroke-dasharray', function() {\n        const length = this.getTotalLength();\n        return `${length} ${length}`;\n      })\n      .attr('stroke-dashoffset', function() {\n        return this.getTotalLength();\n      })\n      .transition()\n      .duration(500)\n      .delay(linkObj => linkObj.source.depth * 500)\n      .attr('stroke-dashoffset', 0);\n\n    // labels\n    svg\n      .selectAll('.label')\n      .data(root.descendants())\n      .join('text')\n      .attr('class', 'label')\n      .text(node => node.data.name)\n      .attr('x', node => node.y)\n      .attr('y', node => node.x - 10)\n      .attr('text-anchor', 'middle')\n      .attr('font-size', '24px')\n      .attr('opacity', 0)\n      .transition()\n      .delay(node => node.depth * 500)\n      .attr('opacity', 1);\n  }, [data, dimensions]);\n  return (\n    <div className='wrapper' ref={wrapperRef}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n};\n\nfunction AnimatedTreeChartProject() {\n  const initialData = {\n    name: 'ðŸ‘¨',\n    children: [\n      {\n        name: 'ðŸ‘§',\n        children: [\n          {\n            name: 'ðŸ‘¦'\n          },\n          {\n            name: 'ðŸ‘¦ðŸ‘¦'\n          },\n          {\n            name: 'ðŸ‘¦ðŸ‘§'\n          }\n        ]\n      },\n      {\n        name: 'ðŸ‘¦'\n      }\n    ]\n  };\n  const [data, setData] = useState(initialData);\n\n  return (\n    <>\n      <h1>Animated Tree Chart</h1>\n      <TreeChart data={data} />\n      <button onClick={() => setData(initialData.children[0])}>\n        Update Data\n      </button>\n      <button onClick={() => setData(initialData)}>Back To Start</button>\n    </>\n  );\n}\n\nexport default AnimatedTreeChartProject;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAFA;AAGA;AAAA;AACA;AAAA;AACA;AAEA;AAOA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAGA;AASA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AACA;AAGA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AADA;AAIA;AADA;AAIA;AADA;AATA;AAeA;AADA;AAjBA;AACA;AAFA;AAAA;AAAA;AACA;AAwBA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}