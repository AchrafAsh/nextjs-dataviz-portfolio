{"version":3,"file":"static/webpack/static/development/pages/projects/geochart.js.04d8cdd6f3c0feca6396.hot-update.js","sources":["webpack:///./pages/projects/geochart.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport {\n  select,\n  geoPath,\n  geoOrthographic,\n  geoMercator,\n  min,\n  max,\n  scaleLinear\n} from 'd3';\nimport useResizeObserver from '../../components/useResizeObserver';\n\nimport data from '../../components/custom.geo.json';\n\nconst GeoChart = ({ data, property }) => {\n  const wrapperRef = useRef();\n  const svgRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear()\n      .domain([minProp, maxProp])\n      .range(['#ccc', 'red']);\n\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    const projection = geoOrthographic()\n      .fitSize([width, height], selectedCountry || data)\n      .precision(100);\n    const pathGenerator = geoPath().projection(projection);\n\n    svg\n      .selectAll('.country')\n      .data(data.features)\n      .join('path')\n      .on('click', feature =>\n        setSelectedCountry(selectedCountry === feature ? null : feature)\n      )\n      .attr('class', 'country')\n      .transition()\n      .attr('fill', feature => colorScale(feature.properties[property]))\n      .attr('d', feature => pathGenerator(feature));\n\n    svg\n      .selectAll('.label')\n      .data([selectedCountry])\n      .join('text')\n      .attr('class', 'label')\n      .transition()\n      .text(\n        feature =>\n          feature &&\n          feature.properties.name +\n            ' : ' +\n            feature.properties[property].toLocaleString()\n      )\n      .attr('x', 10)\n      .attr('y', 25);\n  }, [data, property, dimensions, selectedCountry]);\n\n  return (\n    <div className='wrapper' ref={wrapperRef}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n};\n\nfunction GeoChartProject() {\n  const [property, setProperty] = useState('pop_est');\n\n  return (\n    <>\n      <h2>World Map With d3 Geo</h2>\n      <GeoChart data={data} property={property} />\n      <h3>Select property to highlight</h3>\n      <select value={property} onChange={e => setProperty(e.target.value)}>\n        <option disabled selected>\n          Chose a property\n        </option>\n        <option value='pop_est'>Population</option>\n        <option value='name_len'>Name length</option>\n        <option value='gdp_md_est'>GDP</option>\n      </select>\n    </>\n  );\n}\n\nexport default GeoChartProject;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AASA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAAA;AAAA;AACA;AAWA;AAGA;AAEA;AAIA;AAAA;AAKA;AAAA;AACA;AAAA;AAEA;AAOA;AAAA;AAQA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}