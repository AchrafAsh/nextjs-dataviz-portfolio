{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/achraf/Documents/coding/dataviz-portfolio/pages/projects/animatedtreechart.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useRef } from 'react';\nimport { select, hierarchy, tree, linkHorizontal } from 'd3';\nimport useResizeObserver from '../../components/useResizeObserver';\n\nvar TreeChart = function TreeChart(_ref) {\n  var data = _ref.data;\n  var svgRef = useRef();\n  var wrapperRef = useRef();\n  var dimensions = useResizeObserver(wrapperRef);\n  useEffect(function () {\n    var svg = select(svgRef.current);\n    if (!dimensions) return;\n    var root = hierarchy(data);\n    var treeLayout = tree().size([dimensions.height, dimensions.width]);\n    treeLayout(root);\n    console.log(root.descendants());\n    var linkGenerator = linkHorizontal() //   .source(link => link.source)\n    //   .target(link => link.target)\n    .x(function (node) {\n      return node.y;\n    }).y(function (node) {\n      return node.x;\n    }); // rendering nodes\n\n    svg.selectAll('.node').data(root.descendants()).join('circle').attr('class', 'node').attr('r', 4).attr('fill', 'black').attr('cx', function (node) {\n      return node.y;\n    }).attr('cy', function (node) {\n      return node.x;\n    }).attr('opacity', 0).transition().delay(function (node) {\n      return node.depth * 500;\n    }).attr('opacity', 1); // rendering links\n\n    svg.selectAll('.link').data(root.links()).join('path').attr('class', 'link').attr('fill', 'none').attr('stroke', 'black').attr('d', linkGenerator).attr('stroke-dasharray', function () {\n      var length = this.getTotalLength();\n      return \"\".concat(length, \" \").concat(length);\n    }).attr('stroke-dashoffset', function () {\n      return this.getTotalLength();\n    }).transition().duration(500).delay(function (linkObj) {\n      return linkObj.source.depth * 500;\n    }).attr('stroke-dashoffset', 0); // labels\n\n    svg.selectAll('.label').data(root.descendants()).join('text').attr('class', 'label').text(function (node) {\n      return node.data.name;\n    }).attr('x', function (node) {\n      return node.y;\n    }).attr('y', function (node) {\n      return node.x - 10;\n    }).attr('text-anchor', 'middle').attr('font-size', '24px').attr('opacity', 0).transition().delay(function (node) {\n      return node.depth * 500;\n    }).attr('opacity', 1);\n  }, [data, dimensions]);\n  return __jsx(\"div\", {\n    className: \"wrapper\",\n    ref: wrapperRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, __jsx(\"svg\", {\n    ref: svgRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }));\n};\n\nfunction AnimatedTreeChartProject() {\n  var initialData = {\n    name: 'ðŸ‘¨',\n    children: [{\n      name: 'ðŸ‘§',\n      children: [{\n        name: 'ðŸ‘¦'\n      }, {\n        name: 'ðŸ‘¦ðŸ‘¦'\n      }, {\n        name: 'ðŸ‘¦ðŸ‘§'\n      }]\n    }, {\n      name: 'ðŸ‘¦'\n    }]\n  };\n\n  var _useState = useState(initialData),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, \"Animated Tree Chart\"), __jsx(TreeChart, {\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), __jsx(\"button\", {\n    onClick: function onClick() {\n      return setData(initialData.children[0]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, \"Update Data\"), __jsx(\"button\", {\n    onClick: function onClick() {\n      return setData(initialData);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, \"Back To Start\"));\n}\n\nexport default AnimatedTreeChartProject;","map":{"version":3,"sources":["/home/achraf/Documents/coding/dataviz-portfolio/pages/projects/animatedtreechart.js"],"names":["useEffect","useRef","select","hierarchy","tree","linkHorizontal","useResizeObserver","TreeChart","data","svgRef","wrapperRef","dimensions","svg","current","root","treeLayout","size","height","width","console","log","descendants","linkGenerator","x","node","y","selectAll","join","attr","transition","delay","depth","links","length","getTotalLength","duration","linkObj","source","text","name","AnimatedTreeChartProject","initialData","children","useState","setData"],"mappings":";;;;;;;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,IAA5B,EAAkCC,cAAlC,QAAwD,IAAxD;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAC9B,MAAMC,MAAM,GAAGR,MAAM,EAArB;AACA,MAAMS,UAAU,GAAGT,MAAM,EAAzB;AACA,MAAMU,UAAU,GAAGL,iBAAiB,CAACI,UAAD,CAApC;AAEAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMY,GAAG,GAAGV,MAAM,CAACO,MAAM,CAACI,OAAR,CAAlB;AAEA,QAAI,CAACF,UAAL,EAAiB;AAEjB,QAAMG,IAAI,GAAGX,SAAS,CAACK,IAAD,CAAtB;AAEA,QAAMO,UAAU,GAAGX,IAAI,GAAGY,IAAP,CAAY,CAACL,UAAU,CAACM,MAAZ,EAAoBN,UAAU,CAACO,KAA/B,CAAZ,CAAnB;AACAH,IAAAA,UAAU,CAACD,IAAD,CAAV;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACO,WAAL,EAAZ;AAEA,QAAMC,aAAa,GAAGjB,cAAc,GAClC;AACA;AAFkC,KAGjCkB,CAHmB,CAGjB,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,CAAT;AAAA,KAHa,EAInBA,CAJmB,CAIjB,UAAAD,IAAI;AAAA,aAAIA,IAAI,CAACD,CAAT;AAAA,KAJa,CAAtB,CAXc,CAiBd;;AACAX,IAAAA,GAAG,CACAc,SADH,CACa,OADb,EAEGlB,IAFH,CAEQM,IAAI,CAACO,WAAL,EAFR,EAGGM,IAHH,CAGQ,QAHR,EAIGC,IAJH,CAIQ,OAJR,EAIiB,MAJjB,EAKGA,IALH,CAKQ,GALR,EAKa,CALb,EAMGA,IANH,CAMQ,MANR,EAMgB,OANhB,EAOGA,IAPH,CAOQ,IAPR,EAOc,UAAAJ,IAAI;AAAA,aAAIA,IAAI,CAACC,CAAT;AAAA,KAPlB,EAQGG,IARH,CAQQ,IARR,EAQc,UAAAJ,IAAI;AAAA,aAAIA,IAAI,CAACD,CAAT;AAAA,KARlB,EASGK,IATH,CASQ,SATR,EASmB,CATnB,EAUGC,UAVH,GAWGC,KAXH,CAWS,UAAAN,IAAI;AAAA,aAAIA,IAAI,CAACO,KAAL,GAAa,GAAjB;AAAA,KAXb,EAYGH,IAZH,CAYQ,SAZR,EAYmB,CAZnB,EAlBc,CAgCd;;AACAhB,IAAAA,GAAG,CACAc,SADH,CACa,OADb,EAEGlB,IAFH,CAEQM,IAAI,CAACkB,KAAL,EAFR,EAGGL,IAHH,CAGQ,MAHR,EAIGC,IAJH,CAIQ,OAJR,EAIiB,MAJjB,EAKGA,IALH,CAKQ,MALR,EAKgB,MALhB,EAMGA,IANH,CAMQ,QANR,EAMkB,OANlB,EAOGA,IAPH,CAOQ,GAPR,EAOaN,aAPb,EAQGM,IARH,CAQQ,kBARR,EAQ4B,YAAW;AACnC,UAAMK,MAAM,GAAG,KAAKC,cAAL,EAAf;AACA,uBAAUD,MAAV,cAAoBA,MAApB;AACD,KAXH,EAYGL,IAZH,CAYQ,mBAZR,EAY6B,YAAW;AACpC,aAAO,KAAKM,cAAL,EAAP;AACD,KAdH,EAeGL,UAfH,GAgBGM,QAhBH,CAgBY,GAhBZ,EAiBGL,KAjBH,CAiBS,UAAAM,OAAO;AAAA,aAAIA,OAAO,CAACC,MAAR,CAAeN,KAAf,GAAuB,GAA3B;AAAA,KAjBhB,EAkBGH,IAlBH,CAkBQ,mBAlBR,EAkB6B,CAlB7B,EAjCc,CAqDd;;AACAhB,IAAAA,GAAG,CACAc,SADH,CACa,QADb,EAEGlB,IAFH,CAEQM,IAAI,CAACO,WAAL,EAFR,EAGGM,IAHH,CAGQ,MAHR,EAIGC,IAJH,CAIQ,OAJR,EAIiB,OAJjB,EAKGU,IALH,CAKQ,UAAAd,IAAI;AAAA,aAAIA,IAAI,CAAChB,IAAL,CAAU+B,IAAd;AAAA,KALZ,EAMGX,IANH,CAMQ,GANR,EAMa,UAAAJ,IAAI;AAAA,aAAIA,IAAI,CAACC,CAAT;AAAA,KANjB,EAOGG,IAPH,CAOQ,GAPR,EAOa,UAAAJ,IAAI;AAAA,aAAIA,IAAI,CAACD,CAAL,GAAS,EAAb;AAAA,KAPjB,EAQGK,IARH,CAQQ,aARR,EAQuB,QARvB,EASGA,IATH,CASQ,WATR,EASqB,MATrB,EAUGA,IAVH,CAUQ,SAVR,EAUmB,CAVnB,EAWGC,UAXH,GAYGC,KAZH,CAYS,UAAAN,IAAI;AAAA,aAAIA,IAAI,CAACO,KAAL,GAAa,GAAjB;AAAA,KAZb,EAaGH,IAbH,CAaQ,SAbR,EAamB,CAbnB;AAcD,GApEQ,EAoEN,CAACpB,IAAD,EAAOG,UAAP,CApEM,CAAT;AAqEA,SACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAyB,IAAA,GAAG,EAAED,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAED,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CA/ED;;AAiFA,SAAS+B,wBAAT,GAAoC;AAClC,MAAMC,WAAW,GAAG;AAClBF,IAAAA,IAAI,EAAE,IADY;AAElBG,IAAAA,QAAQ,EAAE,CACR;AACEH,MAAAA,IAAI,EAAE,IADR;AAEEG,MAAAA,QAAQ,EAAE,CACR;AACEH,QAAAA,IAAI,EAAE;AADR,OADQ,EAIR;AACEA,QAAAA,IAAI,EAAE;AADR,OAJQ,EAOR;AACEA,QAAAA,IAAI,EAAE;AADR,OAPQ;AAFZ,KADQ,EAeR;AACEA,MAAAA,IAAI,EAAE;AADR,KAfQ;AAFQ,GAApB;;AADkC,kBAuBVI,QAAQ,CAACF,WAAD,CAvBE;AAAA;AAAA,MAuB3BjC,IAvB2B;AAAA,MAuBrBoC,OAvBqB;;AAyBlC,SACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEE,MAAC,SAAD;AAAW,IAAA,IAAI,EAAEpC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMoC,OAAO,CAACH,WAAW,CAACC,QAAZ,CAAqB,CAArB,CAAD,CAAb;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHF,EAME;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAME,OAAO,CAACH,WAAD,CAAb;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBANF,CADF;AAUD;;AAED,eAAeD,wBAAf","sourcesContent":["import { useEffect, useRef } from 'react';\nimport { select, hierarchy, tree, linkHorizontal } from 'd3';\nimport useResizeObserver from '../../components/useResizeObserver';\n\nconst TreeChart = ({ data }) => {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    if (!dimensions) return;\n\n    const root = hierarchy(data);\n\n    const treeLayout = tree().size([dimensions.height, dimensions.width]);\n    treeLayout(root);\n    console.log(root.descendants());\n\n    const linkGenerator = linkHorizontal()\n      //   .source(link => link.source)\n      //   .target(link => link.target)\n      .x(node => node.y)\n      .y(node => node.x);\n\n    // rendering nodes\n    svg\n      .selectAll('.node')\n      .data(root.descendants())\n      .join('circle')\n      .attr('class', 'node')\n      .attr('r', 4)\n      .attr('fill', 'black')\n      .attr('cx', node => node.y)\n      .attr('cy', node => node.x)\n      .attr('opacity', 0)\n      .transition()\n      .delay(node => node.depth * 500)\n      .attr('opacity', 1);\n\n    // rendering links\n    svg\n      .selectAll('.link')\n      .data(root.links())\n      .join('path')\n      .attr('class', 'link')\n      .attr('fill', 'none')\n      .attr('stroke', 'black')\n      .attr('d', linkGenerator)\n      .attr('stroke-dasharray', function() {\n        const length = this.getTotalLength();\n        return `${length} ${length}`;\n      })\n      .attr('stroke-dashoffset', function() {\n        return this.getTotalLength();\n      })\n      .transition()\n      .duration(500)\n      .delay(linkObj => linkObj.source.depth * 500)\n      .attr('stroke-dashoffset', 0);\n\n    // labels\n    svg\n      .selectAll('.label')\n      .data(root.descendants())\n      .join('text')\n      .attr('class', 'label')\n      .text(node => node.data.name)\n      .attr('x', node => node.y)\n      .attr('y', node => node.x - 10)\n      .attr('text-anchor', 'middle')\n      .attr('font-size', '24px')\n      .attr('opacity', 0)\n      .transition()\n      .delay(node => node.depth * 500)\n      .attr('opacity', 1);\n  }, [data, dimensions]);\n  return (\n    <div className='wrapper' ref={wrapperRef}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n};\n\nfunction AnimatedTreeChartProject() {\n  const initialData = {\n    name: 'ðŸ‘¨',\n    children: [\n      {\n        name: 'ðŸ‘§',\n        children: [\n          {\n            name: 'ðŸ‘¦'\n          },\n          {\n            name: 'ðŸ‘¦ðŸ‘¦'\n          },\n          {\n            name: 'ðŸ‘¦ðŸ‘§'\n          }\n        ]\n      },\n      {\n        name: 'ðŸ‘¦'\n      }\n    ]\n  };\n  const [data, setData] = useState(initialData);\n\n  return (\n    <>\n      <h1>Animated Tree Chart</h1>\n      <TreeChart data={data} />\n      <button onClick={() => setData(initialData.children[0])}>\n        Update Data\n      </button>\n      <button onClick={() => setData(initialData)}>Back To Start</button>\n    </>\n  );\n}\n\nexport default AnimatedTreeChartProject;\n"]},"metadata":{},"sourceType":"module"}