{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/achraf/Documents/coding/dataviz-portfolio/pages/projects/geochart.js\";\n\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from 'react';\nimport { select, geoPath, geoOrthographic, geoMercator, min, max, scaleLinear } from 'd3';\nimport useResizeObserver from '../../components/useResizeObserver';\nimport data from '../../components/cusom.geo.json';\n\nvar GeoChart = function GeoChart(_ref) {\n  var data = _ref.data,\n      property = _ref.property;\n  var wrapperRef = useRef();\n  var svgRef = useRef();\n  var dimensions = useResizeObserver(wrapperRef);\n\n  var _useState = useState(null),\n      selectedCountry = _useState[0],\n      setSelectedCountry = _useState[1];\n\n  useEffect(function () {\n    var svg = select(svgRef.current);\n    var minProp = min(data.features, function (feature) {\n      return feature.properties[property];\n    });\n    var maxProp = max(data.features, function (feature) {\n      return feature.properties[property];\n    });\n    var colorScale = scaleLinear().domain([minProp, maxProp]).range(['#ccc', 'red']);\n\n    var _ref2 = dimensions || wrapperRef.current.getBoundingClientRect(),\n        width = _ref2.width,\n        height = _ref2.height;\n\n    var projection = geoOrthographic().fitSize([width, height], selectedCountry || data).precision(100);\n    var pathGenerator = geoPath().projection(projection);\n    svg.selectAll('.country').data(data.features).join('path').on('click', function (feature) {\n      return setSelectedCountry(selectedCountry === feature ? null : feature);\n    }).attr('class', 'country').transition().attr('fill', function (feature) {\n      return colorScale(feature.properties[property]);\n    }).attr('d', function (feature) {\n      return pathGenerator(feature);\n    });\n    svg.selectAll('.label').data([selectedCountry]).join('text').attr('class', 'label').transition().text(function (feature) {\n      return feature && feature.properties.name + ' : ' + feature.properties[property].toLocaleString();\n    }).attr('x', 10).attr('y', 25);\n  }, [data, property, dimensions, selectedCountry]);\n  return __jsx(\"div\", {\n    className: \"wrapper\",\n    ref: wrapperRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, __jsx(\"svg\", {\n    ref: svgRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }));\n};\n\nfunction GeoChartProject() {\n  var _useState2 = useState('pop_est'),\n      property = _useState2[0],\n      setProperty = _useState2[1];\n\n  return __jsx(React.Fragment, null, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \"World Map With d3 Geo\"), __jsx(GeoChart, {\n    data: data,\n    property: property,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \"Select property to highlight\"), __jsx(\"select\", {\n    value: property,\n    onChange: function onChange(e) {\n      return setProperty(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, __jsx(\"option\", {\n    disabled: true,\n    selected: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, \"Chose a property\"), __jsx(\"option\", {\n    value: \"pop_est\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, \"Population\"), __jsx(\"option\", {\n    value: \"name_len\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"Name length\"), __jsx(\"option\", {\n    value: \"gdp_md_est\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"GDP\")));\n}\n\nexport default GeoChartProject;","map":{"version":3,"sources":["/home/achraf/Documents/coding/dataviz-portfolio/pages/projects/geochart.js"],"names":["React","useRef","useEffect","useState","select","geoPath","geoOrthographic","geoMercator","min","max","scaleLinear","useResizeObserver","data","GeoChart","property","wrapperRef","svgRef","dimensions","selectedCountry","setSelectedCountry","svg","current","minProp","features","feature","properties","maxProp","colorScale","domain","range","getBoundingClientRect","width","height","projection","fitSize","precision","pathGenerator","selectAll","join","on","attr","transition","text","name","toLocaleString","GeoChartProject","setProperty","e","target","value"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport {\n  select,\n  geoPath,\n  geoOrthographic,\n  geoMercator,\n  min,\n  max,\n  scaleLinear\n} from 'd3';\nimport useResizeObserver from '../../components/useResizeObserver';\n\nimport data from '../../components/cusom.geo.json';\n\nconst GeoChart = ({ data, property }) => {\n  const wrapperRef = useRef();\n  const svgRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear()\n      .domain([minProp, maxProp])\n      .range(['#ccc', 'red']);\n\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    const projection = geoOrthographic()\n      .fitSize([width, height], selectedCountry || data)\n      .precision(100);\n    const pathGenerator = geoPath().projection(projection);\n\n    svg\n      .selectAll('.country')\n      .data(data.features)\n      .join('path')\n      .on('click', feature =>\n        setSelectedCountry(selectedCountry === feature ? null : feature)\n      )\n      .attr('class', 'country')\n      .transition()\n      .attr('fill', feature => colorScale(feature.properties[property]))\n      .attr('d', feature => pathGenerator(feature));\n\n    svg\n      .selectAll('.label')\n      .data([selectedCountry])\n      .join('text')\n      .attr('class', 'label')\n      .transition()\n      .text(\n        feature =>\n          feature &&\n          feature.properties.name +\n            ' : ' +\n            feature.properties[property].toLocaleString()\n      )\n      .attr('x', 10)\n      .attr('y', 25);\n  }, [data, property, dimensions, selectedCountry]);\n\n  return (\n    <div className='wrapper' ref={wrapperRef}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n};\n\nfunction GeoChartProject() {\n  const [property, setProperty] = useState('pop_est');\n\n  return (\n    <>\n      <h2>World Map With d3 Geo</h2>\n      <GeoChart data={data} property={property} />\n      <h3>Select property to highlight</h3>\n      <select value={property} onChange={e => setProperty(e.target.value)}>\n        <option disabled selected>\n          Chose a property\n        </option>\n        <option value='pop_est'>Population</option>\n        <option value='name_len'>Name length</option>\n        <option value='gdp_md_est'>GDP</option>\n      </select>\n    </>\n  );\n}\n\nexport default GeoChartProject;\n"]},"metadata":{},"sourceType":"module"}